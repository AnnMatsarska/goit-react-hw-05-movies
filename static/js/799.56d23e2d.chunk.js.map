{"version":3,"file":"static/js/799.56d23e2d.chunk.js","mappings":"mLAAaA,EAAQ,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,wBAAKA,GACb,C,yJCAYC,EAAsBC,EAAAA,GAAAA,IAAH,gHAOnBC,EAAeD,EAAAA,GAAAA,GAAH,2IASZE,EAAeF,EAAAA,GAAAA,EAAH,sHAQZG,EAAkBH,EAAAA,GAAAA,GAAH,oHAOfI,EAAiBJ,EAAAA,GAAAA,EAAH,oH,qDCmD3B,EAnEsB,WACpB,OAA0BK,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,WAAS,GAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,SAERE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,oGAEjBN,GAAa,GAFI,UAGOO,EAAAA,EAAAA,IAAgBJ,GAHvB,OAGXK,EAHW,OAKjBV,EAASU,GALQ,gDAOjBN,EAAS,KAAMb,SAPE,yBASjBW,GAAa,GATI,4EAAH,qDAYlBM,GACD,GAAE,CAACH,IAEJ,IAAQM,EAAuDZ,EAAvDY,MAAOC,EAAgDb,EAAhDa,OAAQC,EAAwCd,EAAxCc,YAAaC,EAA2Bf,EAA3Be,aAAcC,EAAahB,EAAbgB,SAGlD,OACE,+BACE,SAAC,IAAD,WACE,UAAC,IAAD,WACGZ,IACC,SAACb,EAAA,EAAD,CACEC,QAAO,yEAGVU,IAAa,SAACe,EAAA,EAAD,KACd,UAACxB,EAAD,YACE,gBACEyB,IAAKJ,EAdM,mCAcyBA,EAAcK,EAClDC,IAAKR,EACLS,MAAM,QACNC,QAAQ,UAEV,4BACE,SAAC3B,EAAD,UAAeiB,KACf,UAAChB,EAAD,YACE,uBAAG,gBAAe,IAAE2B,KAAKC,MAAqB,GAAfT,GAAmB,QAEpD,SAAClB,EAAD,UAAiB,eACjB,SAACC,EAAD,UAAiBkB,KAEjB,SAACnB,EAAD,UAAiB,aACjB,SAACC,EAAD,UACGe,GACCA,EAAOY,KAAI,YAAmB,IAAhBC,EAAe,EAAfA,GAAIC,EAAW,EAAXA,KAChB,OAAO,4BAAgBA,EAAK,MAAVD,EACnB,aAIT,wBAAI,iCAKb,C,uHChFKE,EAAU,mCACVC,EAAW,gCAEJC,EAAmB,mCAAG,oGACVC,EAAAA,EAAAA,IAAA,UAClBF,EADkB,sCACoBD,IAFV,cAC3BI,EAD2B,yBAI1BA,EAASC,MAJiB,2CAAH,qDAcnBvB,EAAe,mCAAG,WAAMgB,GAAN,uFACNK,EAAAA,EAAAA,IAAA,UAClBF,EADkB,kBACAH,EADA,oBACcE,IAFR,cACvBI,EADuB,yBAItBA,EAASC,MAJa,2CAAH,qD","sources":["components/Error/Error.jsx","pages/MoviesDetails/MovieDetails.styled.js","pages/MoviesDetails/MoviesDetails.jsx","services/movie-api.js"],"sourcesContent":["export const Error = ({ message }) => {\n  return <h1>{message}</h1>;\n};\n","import styled from 'styled-components';\n\nexport const DetailsMovieWrapper = styled.div`\n  display: flex;\n  gap: 30px;\n  justify-content: flex-start;\n  margin-bottom: 30px;\n`;\n\nexport const DetailsTitle = styled.h1`\n  margin-bottom: 50px;\n\n  font-weight: 700;\n  font-size: 46px;\n  line-height: 1.1;\n  letter-spacing: 0.02em;\n`;\n\nexport const DetailsScore = styled.p`\n  margin-bottom: 20px;\n\n  font-size: 24px;\n  line-height: 1.1;\n  letter-spacing: 0.02em;\n`;\n\nexport const DetailsSubTitle = styled.h2`\n  margin-bottom: 10px;\n  font-size: 24px;\n  line-height: 1.1;\n  letter-spacing: 0.02em;\n`;\n\nexport const DetailsSubText = styled.p`\n  margin-bottom: 20px;\n  font-size: 20px;\n  line-height: 1.1;\n  letter-spacing: 0.02em;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport {\n  DetailsMovieWrapper,\n  DetailsTitle,\n  DetailsScore,\n  DetailsSubTitle,\n  DetailsSubText,\n} from './MovieDetails.styled';\n\nimport { fetchMoviesById } from 'services/movie-api';\nimport { Loader } from 'components/Loader/Loader';\nimport { Error } from 'components/Error/Error';\nimport { Container, Section } from 'components/App/App.styled';\nimport noImage from 'images/No-Image.svg.png';\n\nconst MoviesDetails = () => {\n  const [movie, setMovie] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const getMovieById = async () => {\n      try {\n        setIsLoading(true);\n        const movieById = await fetchMoviesById(movieId);\n\n        setMovie(movieById);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getMovieById();\n  }, [movieId]);\n\n  const { title, genres, poster_path, vote_average, overview } = movie;\n  const IMAGE_BASE_URL = 'https://image.tmdb.org/t/p/w500/';\n\n  return (\n    <>\n      <Section>\n        <Container>\n          {error && (\n            <Error\n              message={`Sorry, but the searched movie was not found. Please try again later!`}\n            />\n          )}\n          {isLoading && <Loader />}\n          <DetailsMovieWrapper>\n            <img\n              src={poster_path ? IMAGE_BASE_URL + poster_path : noImage}\n              alt={title}\n              width=\"300px\"\n              loading=\"lazy\"\n            />\n            <div>\n              <DetailsTitle>{title}</DetailsTitle>\n              <DetailsScore>\n                <b>User score:</b> {Math.round(vote_average * 10)}%\n              </DetailsScore>\n              <DetailsSubTitle>Overview:</DetailsSubTitle>\n              <DetailsSubText>{overview}</DetailsSubText>\n\n              <DetailsSubTitle>Genres:</DetailsSubTitle>\n              <DetailsSubText>\n                {genres &&\n                  genres.map(({ id, name }) => {\n                    return <span key={id}>{name} </span>;\n                  })}\n              </DetailsSubText>\n            </div>\n          </DetailsMovieWrapper>\n          <h2>Additional information</h2>\n        </Container>\n      </Section>\n    </>\n  );\n};\n\nexport default MoviesDetails;\n","import axios from 'axios';\n\nconst API_KEY = '1e380c5eeff8711da34762a498fc6761';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nexport const fetchTrendingMovies = async () => {\n  const response = await axios.get(\n    `${BASE_URL}trending/movie/day?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const fetchMoviesByQuery = async (query, page = 1) => {\n  const response = await axios.get(\n    `${BASE_URL}search/movie?api_key=${API_KEY}&query=${query}&page=${page}`\n  );\n  return response.data;\n};\n\nexport const fetchMoviesById = async id => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${id}?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const fetchMoviesByCredits = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const fetchMoviesByReviews = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n"],"names":["Error","message","DetailsMovieWrapper","styled","DetailsTitle","DetailsScore","DetailsSubTitle","DetailsSubText","useState","movie","setMovie","isLoading","setIsLoading","error","setError","movieId","useParams","useEffect","getMovieById","fetchMoviesById","movieById","title","genres","poster_path","vote_average","overview","Loader","src","noImage","alt","width","loading","Math","round","map","id","name","API_KEY","BASE_URL","fetchTrendingMovies","axios","response","data"],"sourceRoot":""}