{"version":3,"file":"static/js/595.b8a092ea.chunk.js","mappings":"gUAEaA,EAAOC,EAAAA,GAAAA,GAAH,wIAQJC,EAAkBD,EAAAA,GAAAA,IAAH,uQAefE,EAAWF,EAAAA,GAAAA,EAAH,+CAIRG,EAAMH,EAAAA,GAAAA,IAAH,0C,SC1BHI,EAAW,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAEzB,OACE,SAACN,EAAD,UACGM,EAAKC,OAAS,EACXD,EAAKE,KAAI,gBAAGC,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,cAAeC,EAAhC,EAAgCA,UAAWC,EAA3C,EAA2CA,GAA3C,OACP,2BACE,SAACR,EAAD,CACES,IAAKJ,EAPI,mCAO4BA,EAAeK,EACpDC,IAAKL,EACLM,MAAM,QACNC,OAAO,QACPC,QAAQ,UAEV,UAAChB,EAAD,YACE,SAACC,EAAD,UAAWO,KACX,0BACE,uBAAG,eAAc,IAAEC,UAXhBC,EADF,IAiBT,sDAGT,ECqBD,EAxCa,WACX,OAAwBO,EAAAA,EAAAA,UAAS,IAAjC,eAAOb,EAAP,KAAac,EAAb,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KACA,GAA0BH,EAAAA,EAAAA,WAAS,GAAnC,eAAOI,EAAP,KAAcC,EAAd,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAkBR,OAhBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,oGAEjBN,GAAa,GAFI,UAGOO,EAAAA,EAAAA,IAAgBJ,GAHvB,OAGXK,EAHW,OAKjBV,EAAQU,EAAUxB,MALD,gDAOjBkB,EAAS,KAAMO,SAPE,yBASjBT,GAAa,GATI,4EAAH,qDAYlBM,GACD,GAAE,CAACH,KAGF,+BACE,SAAC,IAAD,WACE,UAAC,IAAD,WACGF,IACC,SAACS,EAAA,EAAD,CACED,QAAO,wEAGVV,IAAa,SAACY,EAAA,EAAD,IACJ,IAAT3B,IAAc,SAACD,EAAD,CAAUC,KAAMA,UAKxC,C,oEC/CY0B,EAAQ,SAAC,GAAiB,IAAfD,EAAc,EAAdA,QACtB,OAAO,wBAAKA,GACb,C,mMCAKG,EAAU,mCACVC,EAAW,gCAEJC,EAAmB,mCAAG,oGACVC,EAAAA,EAAAA,IAAA,UAClBF,EADkB,sCACoBD,IAFV,cAC3BI,EAD2B,yBAI1BA,EAASC,MAJiB,2CAAH,qDAOnBC,EAAkB,mCAAG,WAAOC,GAAP,4FAAcC,EAAd,+BAAqB,EAArB,SACTL,EAAAA,EAAAA,IAAA,UAClBF,EADkB,gCACcD,EADd,kBAC+BO,EAD/B,iBAC6CC,IAFpC,cAC1BJ,EAD0B,yBAIzBA,EAASC,MAJgB,2CAAH,sDAOlBI,EAAe,mCAAG,WAAM/B,GAAN,uFACNyB,EAAAA,EAAAA,IAAA,UAClBF,EADkB,kBACAvB,EADA,oBACcsB,IAFR,cACvBI,EADuB,yBAItBA,EAASC,MAJa,2CAAH,sDAOfV,EAAe,mCAAG,WAAMJ,GAAN,uFACNY,EAAAA,EAAAA,IAAA,UAClBF,EADkB,kBACAV,EADA,4BAC2BS,IAFrB,cACvBI,EADuB,yBAItBA,EAASC,MAJa,2CAAH,sDAOfK,EAAkB,mCAAG,WAAMnB,GAAN,uFACTY,EAAAA,EAAAA,IAAA,UAClBF,EADkB,kBACAV,EADA,4BAC2BS,IAFlB,cAC1BI,EAD0B,yBAIzBA,EAASC,MAJgB,2CAAH,qD","sources":["components/Cast/Cast.styled.js","components/Cast/CastList.jsx","components/Cast/Cast.jsx","components/Error/Error.jsx","services/movie-api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  gap: 44px;\n  justify-content: center;\n  flex-wrap: wrap;\n  justify-content: flex-start;\n`;\n\nexport const CastInfoWrapper = styled.div`\n  border-radius: 0 0 8px 8px;\n  background-color: rgb(239, 187, 64);\n\n  width: 192px;\n  height: 60px;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 8px;\n\n  font-size: 14px;\n  font-weight: 500;\n  line-height: 18px;\n`;\n\nexport const CastName = styled.p`\n  margin-bottom: 5px;\n`;\n\nexport const Img = styled.img`\n  height: 300px;\n`;\n","import noImage from 'images/No-Image.svg.png';\nimport { List, CastInfoWrapper, CastName, Img } from './Cast.styled';\n\nexport const CastList = ({ cast }) => {\n  const IMAGE_BASE_URL = 'https://image.tmdb.org/t/p/w200/';\n  return (\n    <List>\n      {cast.length > 0\n        ? cast.map(({ profile_path, original_name, character, id }) => (\n            <li key={id}>\n              <Img\n                src={profile_path ? IMAGE_BASE_URL + profile_path : noImage}\n                alt={original_name}\n                width=\"200px\"\n                height=\"300px\"\n                loading=\"lazy\"\n              />\n              <CastInfoWrapper>\n                <CastName>{original_name}</CastName>\n                <p>\n                  <b>Character:</b> {character}\n                </p>\n              </CastInfoWrapper>\n            </li>\n          ))\n        : 'Unfortunately, there are no actors for this movie.'}\n    </List>\n  );\n};\n","import { Container, Section } from 'components/App/App.styled';\nimport { Error } from 'components/Error/Error';\nimport { Loader } from 'components/Loader/Loader';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { fetchMoviesCast } from 'services/movie-api';\nimport { CastList } from './CastList';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const getMovieCast = async () => {\n      try {\n        setIsLoading(true);\n        const movieById = await fetchMoviesCast(movieId);\n\n        setCast(movieById.cast);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getMovieCast();\n  }, [movieId]);\n\n  return (\n    <>\n      <Section>\n        <Container>\n          {error && (\n            <Error\n              message={`Sorry, but the searched cast was not found. Please try again later!`}\n            />\n          )}\n          {isLoading && <Loader />}\n          {cast !== 0 && <CastList cast={cast} />}\n        </Container>\n      </Section>\n    </>\n  );\n};\n\nexport default Cast;\n","export const Error = ({ message }) => {\n  return <h1>{message}</h1>;\n};\n","import axios from 'axios';\n\nconst API_KEY = '1e380c5eeff8711da34762a498fc6761';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nexport const fetchTrendingMovies = async () => {\n  const response = await axios.get(\n    `${BASE_URL}trending/movie/day?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const fetchMoviesByQuery = async (query, page = 1) => {\n  const response = await axios.get(\n    `${BASE_URL}search/movie?api_key=${API_KEY}&query=${query}&page=${page}`\n  );\n  return response.data;\n};\n\nexport const fetchMoviesById = async id => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${id}?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const fetchMoviesCast = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const fetchMoviesReviews = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n"],"names":["List","styled","CastInfoWrapper","CastName","Img","CastList","cast","length","map","profile_path","original_name","character","id","src","noImage","alt","width","height","loading","useState","setCast","isLoading","setIsLoading","error","setError","movieId","useParams","useEffect","getMovieCast","fetchMoviesCast","movieById","message","Error","Loader","API_KEY","BASE_URL","fetchTrendingMovies","axios","response","data","fetchMoviesByQuery","query","page","fetchMoviesById","fetchMoviesReviews"],"sourceRoot":""}